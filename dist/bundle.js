!function(n){var t={};function e(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=n,e.c=t,e.d=function(n,t,r){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:r})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var o in n)e.d(r,o,function(t){return n[t]}.bind(null,o));return r},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=11)}([function(n,t,e){var r=e(1);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(3)(r,o);r.locals&&(n.exports=r.locals)},function(n,t,e){(n.exports=e(2)(!1)).push([n.i,'/**********************************************\n*** GENERAL\n**********************************************/\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n.clearfix::after {\n    content: "";\n    display: table;\n    clear: both;\n}\n\nbody {\n    background-size: cover;\n    background-position: center;\n    font-family: Lato;\n    font-weight: 300;\n    position: relative;\n    height: 100vh;\n    color: #555;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.wrapper {\n    width: 1000px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: #fff;\n    box-shadow: 0px 10px 50px rgba(75, 73, 73, 0.3);\n    overflow: hidden;\n}\n\n.player-0-panel,\n.player-1-panel {\n    width: 50%;\n    float: left;\n    height: 600px;\n    padding: 100px;\n}\n\n/**********************************************\n*** PLAYERS\n**********************************************/\n\n.player-name {\n    font-size: 40px;\n    text-align: center;\n    text-transform: uppercase;\n    letter-spacing: 2px;\n    font-weight: 100;\n    margin-top: 20px;\n    margin-bottom: 10px;\n    position: relative;\n}\n\n.player-score {\n    text-align: center;\n    font-size: 80px;\n    font-weight: 100;\n    color: black;\n    margin-bottom: 130px;\n}\n\n.active { background-color: #f7f7f7; }\n.active .player-name { font-weight: 300; }\n\n.active .player-name::after {\n    content: "\\2022";\n    font-size: 47px;\n    position: absolute;\n    color: orange;\n    top: -7px;\n    right: 10px;\n    \n}\n\n.player-current-box {\n    background-color: orange;\n    color: #fff;\n    width: 40%;\n    margin: 0 auto;\n    padding: 12px;\n    text-align: center;\n}\n\n.player-current-label {\n    text-transform: uppercase;\n    margin-bottom: 10px;\n    font-size: 12px;\n    color: #222;\n}\n\n.player-current-score {\n    font-size: 30px;\n}\n\nbutton {\n    position: absolute;\n    width: 200px;\n    left: 50%;\n    transform: translateX(-50%);\n    color: #555;\n    background: none;\n    border: none;\n    font-family: Lato;\n    font-size: 20px;\n    text-transform: uppercase;\n    cursor: pointer;\n    font-weight: 300;\n    transition: background-color 0.3s, color 0.3s;\n}\n\nbutton:hover { font-weight: 600; }\nbutton:hover i { margin-right: 20px; }\n\nbutton:focus {\n    outline: none;\n}\n\ni {\n    color: orange;\n    display: inline-block;\n    margin-right: 15px;\n    font-size: 32px;\n    line-height: 1;\n    vertical-align: text-top;\n    margin-top: -4px;\n    transition: margin 0.3s;\n}\n\n.btn-new { top: 45px;}\n.btn-roll { top: 403px;}\n.btn-hold { top: 467px;}\n.btn-result { top: 90px;}\n.field-limit { top: 530px;}\n\n.field-limit {\n    position: absolute;\n    width: 200px;\n    height: 35px;\n    left: 50%;\n    transform: translateX(-50%);\n    color: #555;\n    background: none;\n    border: 1px solid orange;\n    border-radius: 8px;\n    font-family: Lato;\n    font-size: 20px;\n    text-transform: uppercase;\n    cursor: pointer;\n    font-weight: 300;\n    transition: background-color 0.3s, color 0.3s;\n    text-align: center;\n}\n\n#dice1 {\n    position: absolute;\n    left: 50%;\n    top: 140px;\n    transform: translateX(-50%);\n    height: 100px;\n    box-shadow: 0px 10px 60px rgba(0, 0, 0, 0.10);\n}\n\n#dice2 {\n    position: absolute;\n    left: 50%;\n    top: 270px;\n    transform: translateX(-50%);\n    height: 100px;\n    box-shadow: 0px 10px 60px rgba(0, 0, 0, 0.10);\n}\n\n.winner { background-color: #f7f7f7; }\n.winner .player-name { font-weight: 300; color: #EB4D4D; }\n\n.results-panel {\n    width: 500px;\n    height: 300px;\n    border: 1px solid orange;\n    border-radius: 4px;\n    background: white;\n    z-index: 2;\n    display: none;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    padding: 10px;\n}\n\n.vissible {\n    display: flex;\n}\n',""])},function(n,t,e){"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map(function(t){var e=function(n,t){var e=n[1]||"",r=n[3];if(!r)return e;if(t&&"function"==typeof btoa){var o=(a=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(s," */")),i=r.sources.map(function(n){return"/*# sourceURL=".concat(r.sourceRoot).concat(n," */")});return[e].concat(i).concat([o]).join("\n")}var a,c,s;return[e].join("\n")}(t,n);return t[2]?"@media ".concat(t[2],"{").concat(e,"}"):e}).join("")},t.i=function(n,e){"string"==typeof n&&(n=[[null,n,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(var a=0;a<n.length;a++){var c=n[a];null!=c[0]&&r[c[0]]||(e&&!c[2]?c[2]=e:e&&(c[2]="(".concat(c[2],") and (").concat(e,")")),t.push(c))}},t}},function(n,t,e){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),c=function(n){var t={};return function(n,e){if("function"==typeof n)return n();if(void 0===t[n]){var r=function(n,t){return t?t.querySelector(n):document.querySelector(n)}.call(this,n,e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}t[n]=r}return t[n]}}(),s=null,l=0,u=[],p=e(4);function f(n,t){for(var e=0;e<n.length;e++){var r=n[e],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(y(r.parts[a],t))}else{var c=[];for(a=0;a<r.parts.length;a++)c.push(y(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:c}}}}function d(n,t){for(var e=[],r={},o=0;o<n.length;o++){var i=n[o],a=t.base?i[0]+t.base:i[0],c={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(c):e.push(r[a]={id:a,parts:[c]})}return e}function m(n,t){var e=c(n.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===n.insertAt)r?r.nextSibling?e.insertBefore(t,r.nextSibling):e.appendChild(t):e.insertBefore(t,e.firstChild),u.push(t);else if("bottom"===n.insertAt)e.appendChild(t);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=c(n.insertAt.before,e);e.insertBefore(t,o)}}function g(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var t=u.indexOf(n);t>=0&&u.splice(t,1)}function h(n){var t=document.createElement("style");if(void 0===n.attrs.type&&(n.attrs.type="text/css"),void 0===n.attrs.nonce){var r=function(){0;return e.nc}();r&&(n.attrs.nonce=r)}return b(t,n.attrs),m(n,t),t}function b(n,t){Object.keys(t).forEach(function(e){n.setAttribute(e,t[e])})}function y(n,t){var e,r,o,i;if(t.transform&&n.css){if(!(i="function"==typeof t.transform?t.transform(n.css):t.transform.default(n.css)))return function(){};n.css=i}if(t.singleton){var a=l++;e=s||(s=h(t)),r=w.bind(null,e,a,!1),o=w.bind(null,e,a,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(n){var t=document.createElement("link");return void 0===n.attrs.type&&(n.attrs.type="text/css"),n.attrs.rel="stylesheet",b(t,n.attrs),m(n,t),t}(t),r=function(n,t,e){var r=e.css,o=e.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=p(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),c=n.href;n.href=URL.createObjectURL(a),c&&URL.revokeObjectURL(c)}.bind(null,e,t),o=function(){g(e),e.href&&URL.revokeObjectURL(e.href)}):(e=h(t),r=function(n,t){var e=t.css,r=t.media;r&&n.setAttribute("media",r);if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}.bind(null,e),o=function(){g(e)});return r(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;r(n=t)}else o()}}n.exports=function(n,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var e=d(n,t);return f(e,t),function(n){for(var r=[],o=0;o<e.length;o++){var a=e[o];(c=i[a.id]).refs--,r.push(c)}n&&f(d(n,t),t);for(o=0;o<r.length;o++){var c;if(0===(c=r[o]).refs){for(var s=0;s<c.parts.length;s++)c.parts[s]();delete i[c.id]}}}};var x,v=(x=[],function(n,t){return x[n]=t,x.filter(Boolean).join("\n")});function w(n,t,e,r){var o=e?"":r.css;if(n.styleSheet)n.styleSheet.cssText=v(t,o);else{var i=document.createTextNode(o),a=n.childNodes;a[t]&&n.removeChild(a[t]),a.length?n.insertBefore(i,a[t]):n.appendChild(i)}}},function(n,t){n.exports=function(n){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var e=t.protocol+"//"+t.host,r=e+t.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,t){var o,i=t.trim().replace(/^"(.*)"$/,function(n,t){return t}).replace(/^'(.*)'$/,function(n,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?n:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?e+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(n,t,e){n.exports=e.p+"dice-1.png"},function(n,t,e){n.exports=e.p+"dice-2.png"},function(n,t,e){n.exports=e.p+"dice-3.png"},function(n,t,e){n.exports=e.p+"dice-4.png"},function(n,t,e){n.exports=e.p+"dice-5.png"},function(n,t,e){n.exports=e.p+"dice-6.png"},function(n,t,e){"use strict";e.r(t);var r=()=>{document.querySelector(".results-panel").classList.toggle("vissible"),document.querySelector(".results-item").innerHTML="";let n=[];for(let t=0,e=localStorage.length;t<e;++t)n.push(localStorage.getItem(localStorage.key(t)));n.sort((n,t)=>n-t),n.reverse();for(let t=0,e=n.length;t<e;++t)document.querySelector(".results-item").innerHTML+=`<div id="result-${t}" class="game-results">Players win ${n[t]} time(s)!</div>`};var o={getScore:function(n){return localStorage.getItem(n)},setScore:function(n,t){let e,r=this.getScore(n);e=r>0?+r:0,localStorage.setItem(n,`${e+=1}`)},resetScore:function(n){localStorage.removeItem(n)}};e(0),e(5),e(6),e(7),e(8),e(9),e(10);const i=document.querySelector("#dice1"),a=document.querySelector("#dice2");let c=[0,0],s=0,l=100,u=0;function p(n){this.name=n,this.score=null,this.isActive=null,this.__proto__=o}const f=new p(prompt("Введите имя первого игрока","Игрок 1")),d=new p(prompt("Введите имя второго игрока","Игрок 2")),m=()=>{document.querySelector("#current-0").textContent=0,document.querySelector("#current-1").textContent=0,document.querySelector("#score-0").textContent=0,document.querySelector("#score-1").textContent=0,document.querySelector("#name-0").textContent=f.name,document.querySelector("#name-1").textContent=d.name,i.style.display="none",a.style.display="none"};m(),document.querySelector(".btn-roll").addEventListener("click",()=>{let n=Math.floor(6*Math.random())+1,t=Math.floor(6*Math.random())+1;i.src=`dice-${n}.png`,i.style.display="block",a.src=`dice-${t}.png`,a.style.display="block",n!==t&&2!==n&&2!==t?(u+=n+t,document.getElementById(`current-${s}`).textContent=u,c[s]+u>=l&&(alert(`Player ${s} won!!!`),f.setScore(s.toString(),1),m())):g()});const g=()=>{u=0,document.getElementById("current-"+s).textContent=0,document.querySelector(`.player-${s}-panel`).classList.toggle("active"),s=+!s,i.style.display="none",a.style.display="none",document.querySelector(`.player-${s}-panel`).classList.toggle("active")};document.querySelector(".btn-hold").addEventListener("click",()=>{c[s]+=u,document.querySelector(`#score-${s}`).textContent=c[s],g()}),document.querySelector(".btn-result").addEventListener("click",r),document.querySelector("#max-limit-form").addEventListener("submit",n=>{n.preventDefault(),l=document.querySelector(".field-limit").value}),document.querySelector(".btn-new").addEventListener("click",()=>{m()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,